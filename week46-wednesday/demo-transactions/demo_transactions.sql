/*
  demo1_transaktioner
*/

---------------------------------------------------------------------------

DELIMITER //

CREATE PROCEDURE create_order_with_check()
BEGIN
    -- B칬rja en ny transaktion
    START TRANSACTION;

    -- L칛gg till en ny order
    INSERT INTO `order` (customer_id, employee_id, order_date, ship_country)
    VALUES ('ALFKI', 5, CURDATE(), 'Sweden');

    -- F친 order_id f칬r den nya ordern
    SET @new_order_id = LAST_INSERT_ID();

    -- L칛gg till produkter till ordern med kontroll av lager
    -- Kontrollera att det finns minst 10 enheter i lager f칬r product_id = 1
    UPDATE product
    SET unit_in_stock = unit_in_stock - 10
    WHERE product_id = 1 AND unit_in_stock >= 10;

    -- Kontrollera om uppdateringen lyckades (lagerantalet var tillr칛ckligt)
    IF ROW_COUNT() = 0 THEN
        -- Om det inte fanns tillr칛ckligt lager, 친ngra hela transaktionen
        ROLLBACK;
        SELECT 'Lagerantal f칬r l친gt, transaktionen har 친ngrats.' AS resultat;
    ELSE
        -- Annars spara alla 칛ndringar permanent
        COMMIT;
        SELECT 'Order skapad och produkter reserverade' AS resultat;
    END IF;
END //

DELIMITER ;

-- IF...THEN...END IF kan endast anv칛ndas i lagrade program (som procedurer eller triggers). Sry f칬r demosp칬ke 游삒

---------------------------------------------------------------------------

-- B칬rja transaktionen
START TRANSACTION;

-- Steg 1: Uppdatera f칬rsta orderdetaljen
UPDATE order_detail
SET quantity = quantity - 1
WHERE order_id = 10248 AND product_id = 11;

-- S칛tt en 친terst칛llningspunkt
SAVEPOINT step1;

-- Steg 2: Uppdatera n칛sta orderdetalj
UPDATE order_detail
SET quantity = quantity - 1
WHERE order_id = 10249 AND product_id = 42;

-- S칛tt ytterligare en 친terst칛llningspunkt
SAVEPOINT step2;

-- Anta att vi uppt칛cker ett problem och vill 친terg친 till step1
ROLLBACK TO SAVEPOINT step1;

-- Forts칛tt med andra operationer eller avsluta transaktionen
COMMIT;

---------------------------------------------------------------------------

/*
  START TRANSACTION b칬rjar en ny transaktion.
  COMMIT sparar alla 칛ndringar permanent.
  ROLLBACK 친ngrar alla 칛ndringar om n친got g친r fel innan COMMIT.
  SAVEPOINT skapar 친terst칛llningspunkter, vilket g칬r det m칬jligt att 친ngra specifika delar av en transaktion.
*/